var searchIndex = {};
searchIndex["pwasm_abi"] = {"doc":"WASM ABI Tools","items":[[0,"eth","pwasm_abi","Legacy Ethereum-like ABI generator",null,null],[3,"Stream","pwasm_abi::eth","Stream interpretation of incoming payload",null,null],[3,"Sink","","Sink for returning number of arguments",null,null],[4,"Error","","Error for decoding rust types from stream",null,null],[13,"InvalidBool","","Invalid bool for provided input",0,null],[13,"InvalidU32","","Invalid u32 for provided input",0,null],[13,"InvalidU64","","Invalid u64 for provided input",0,null],[13,"UnexpectedEof","","Unexpected end of the stream",0,null],[13,"InvalidPadding","","Invalid padding for fixed type",0,null],[13,"Other","","Other error",0,null],[11,"new","","New stream for known payload",1,null],[11,"pop","","Pop next argument of known type",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"position","","Current position for the stream",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance","","Advance stream position for `amount` bytes",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"finish_advance","","Finish current advance, advancing stream to the next 32 byte step",1,{"inputs":[{"name":"self"}],"output":null}],[11,"payload","","Stream payload",1,null],[11,"peek","","Peek next byte in stream",1,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"new","","New sink with known capacity",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","Consume `val` to the Sink",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drain_to","","Drain current Sink to the target vector",2,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"finalize_panicking","","Consume current Sink to produce a vector with content. May panic if declared number of arguments does not match the resulting number of bytes should be produced.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"preamble_mut","","Mutable reference to the Sink preamble",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"heap_mut","","Mutable reference to the Sink heap",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"AsLog","","As log trait for how primitive types are represented as indexed arguments of the event log",null,null],[10,"as_log","","Convert type to hash representation for the event log.",3,{"inputs":[{"name":"self"}],"output":{"name":"h256"}}],[8,"AbiType","","Abi type trait",null,null],[10,"decode","","Insantiate type from data stream",4,{"inputs":[{"name":"stream"}],"output":{"generics":["error"],"name":"result"}}],[10,"encode","","Push type to data sink",4,{"inputs":[{"name":"self"},{"name":"sink"}],"output":null}],[18,"IS_FIXED","","Whether type has fixed length or not",4,null],[8,"EndpointInterface","","Endpoint interface for contracts",null,null],[10,"dispatch","","Dispatch payload for regular method",5,null],[10,"dispatch_ctor","","Dispatch constructor payload",5,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}]],"paths":[[4,"Error"],[3,"Stream"],[3,"Sink"],[8,"AsLog"],[8,"AbiType"],[8,"EndpointInterface"]]};
initSearch(searchIndex);
